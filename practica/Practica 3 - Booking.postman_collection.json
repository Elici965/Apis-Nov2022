{
	"info": {
		"_postman_id": "e0ed9ab6-e80d-4471-b83d-94b874400748",
		"name": "Practica 3 - Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3830516"
	},
	"item": [
		{
			"name": "HealthCheck - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 201.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 201.\",function(){\r",
							"    pm.response.to.have.status(201)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a Created.\",()=> {\r",
							"    pm.response.to.have.status(\"Created\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el response contenga Created.\",()=> {\r",
							"   pm.expect(pm.response.text()).contain(\"Created\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/ping",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetToken - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"//Prueba para validar que el body contiene la palabra token\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\")\r",
							"});\r",
							"\r",
							"//Estos se utilizan para imprimir por consola\r",
							"//console.log(pm.response.text())\r",
							"//console.log(pm.response.json().token.length)\r",
							"\r",
							"pm.test(\"Validar que el campo token retorna un campo tipo String\", ()=>{\r",
							"    pm.expect(pm.response.json().token).to.be.a(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el token tiene un tamaño de 15 caracteres\", ()=>{\r",
							"    var tamano = pm.response.json().token.length;\r",
							"    pm.expect(tamano).to.be.equal(15)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el token no es null\", ()=>{\r",
							"    pm.expect(pm.response.json().token).not.to.be.null\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})\r",
							"\r",
							"tests[\"Test Response Time \" + responseTime + \"ms\"] = responseTime < 2000;\r",
							"tests[\"Body is not empty\"] = (responseBody !=null);\r",
							"\r",
							"//Crear variables\r",
							" var token  = pm.response.json().token;\r",
							" pm.environment.set(\"token\", token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
				},
				"url": {
					"raw": "https://{{url_base}}/auth",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"console.log(\"Response: \", responseJson.bookingid)\r",
							"pm.environment.set(\"id\",responseJson.bookingid)\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a string\", function () {\r",
							"    pm.expect(pm.response.bookingdates).not.to.be.string;\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"pm.test(\"Validar que el nombre de la reserva es igual a la variable\",function(){\r",
							"    pm.expect(responseJson.booking.firstname).to.eql(name)\r",
							"})\r",
							"\r",
							"//Validar un header response\r",
							"pm.test(\"Validar el header Content type contiene application json\"), function(){\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=utf-8')\r",
							"}\r",
							"\r",
							"pm.test(\"Validar el tamaño de la respuesta\"), function(){\r",
							"    console.log(pm.response.size().total)\r",
							"    pm.expect(pm.response.size().total).to.be.below(1000)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"//console.log(\"nombre\",name)\r",
							"pm.environment.set(\"nombre\",name)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"apellido\",lastName)\r",
							"\r",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"precio\",price)\r",
							"\r",
							"var deposit = pm.variables.replaceIn('{{$randomBoolean}}')\r",
							"pm.environment.set(\"deposito\",deposit)\r",
							"\r",
							"var date = pm.variables.replaceIn('{{$isoTimestamp}}').split('T')[0];\r",
							"pm.environment.set(\"fecha\",date)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{nombre}}\",\r\n    \"lastname\" : \"{{apellido}}\",\r\n    \"totalprice\" : \"{{precio}}\",\r\n    \"depositpaid\" : \"{{deposito}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{fecha}}\",   \r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingCreated - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200 cuando se consulta un booking existente.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200 cuando se consulta un booking existente.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK cuando se consulta un booking existente.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"pm.test(\"Validar que el nombre de la reserva es igual a la variable\",function(){\r",
							"    pm.expect(pm.response.json().firstname).contain(name)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200 cuando se actualice un booking existente.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK cuando se actualice un booking existente.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
				},
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBookingNoExistente - 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el código de respuesta es un 405 cuando se actualice un booking no existente.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a Method Not Allowed cuando se actualice un booking no existente.\",()=> {\r",
							"    pm.response.to.have.status(\"Method Not Allowed\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
				},
				"url": {
					"raw": "https://{{url_base}}/booking/2312312312213123",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"2312312312213123"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterUpdate - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200 cuando se consulta un booking existente.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200 cuando se consulta un booking existente.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK cuando se consulta un booking existente.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 201.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 201.\",function(){\r",
							"    pm.response.to.have.status(201)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a Created.\",()=> {\r",
							"    pm.response.to.have.status(\"Created\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBookingNoExistente - 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 405.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(405);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 405.\",function(){\r",
							"    pm.response.to.have.status(405)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a Method Not Allowed.\",()=> {\r",
							"    pm.response.to.have.status(\"Method Not Allowed\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/booking/123123123",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"123123123"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingNoCreated - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code response es un 404 cuando se consulta un booking No existente.\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a Not Found cuando se consulta un booking No existente..\",()=> {\r",
							"    pm.response.to.have.status(\"Not Found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/121124",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"121124"
					]
				}
			},
			"response": []
		}
	]
}