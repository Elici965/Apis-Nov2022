{
	"info": {
		"_postman_id": "ed8354d4-a0e8-4faa-baf9-206068b7c3b1",
		"name": "Practica 4 - Tienda de Mascotas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3830516"
	},
	"item": [
		{
			"name": "AddNewPet-200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
							"pm.environment.set(\"nombre\",name)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"//console.log( \"variable nombre: \", name)\r",
							"var nombreresponse = pm.response.json().name\r",
							"//console.log(\"Response: \", pm.response.json().name)\r",
							"\r",
							"pm.test(\"Validar que el nombre de respuesta sea igual que el que se envia\", function() {\r",
							"    pm.expect(nombreresponse).to.eql(name)\r",
							"});\r",
							"\r",
							"//console.log(\"Response: \", pm.response.json().id)\r",
							"console.log(\"Response: \", pm.response.text().split(':')[1])\r",
							"\r",
							"let responseSplit = pm.response.text().split(':')[1]\r",
							"console.log(responseSplit.split(',')[0])\r",
							"\r",
							"pm.environment.set('id',(responseSplit.split(',')[0]))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{nombre}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPetCreated-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"var nombreresponse = pm.response.json().name\r",
							"pm.test(\"Validar que el nombre de respuesta sea igual que el que se envia\", function() {\r",
							"    pm.expect(nombreresponse).to.eql(name)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PetNotFound -404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 404\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que responde con el mensaje Pet not found.\", function(){\r",
							"    pm.expect(pm.response.text()).to.include(\"Pet not found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"Not Found\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var ramdomid = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"ramdomId\",ramdomid)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/22323",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"22323"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePet-200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
							"pm.environment.set(\"nombre\",name)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"//console.log( \"variable nombre: \", name)\r",
							"var nombreresponse = pm.response.json().name\r",
							"//console.log(\"Response: \", pm.response.json().name)\r",
							"\r",
							"pm.test(\"Validar que el nombre de respuesta sea igual que el que se envia\", function() {\r",
							"    pm.expect(nombreresponse).to.eql(name)\r",
							"});\r",
							"\r",
							"//console.log(\"Response: \", pm.response.json().id)\r",
							"console.log(\"Response: \", pm.response.text().split(':')[1])\r",
							"\r",
							"let responseSplit = pm.response.text().split(':')[1]\r",
							"console.log(responseSplit.split(',')[0])\r",
							"\r",
							"pm.environment.set('id',(responseSplit.split(',')[0]))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{nombre}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePetConIDNoValido-500",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 500, cuando el id no es válido\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(500)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body contiene que paso algo mal\", function(){\r",
							"    pm.expect(pm.response.text()).contain(\"something bad happened\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"1213123123*\",\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{nombre}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPetUpdated-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"var name = pm.environment.get(\"nombre\")\r",
							"var nombreresponse = pm.response.json().name\r",
							"pm.test(\"Validar que el nombre de respuesta sea igual que el que se envia\", function() {\r",
							"    pm.expect(nombreresponse).to.eql(name)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UploadImage-200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "perro.jpg"
						}
					]
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}/uploadImage",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}",
						"uploadImage"
					]
				}
			},
			"response": []
		},
		{
			"name": "UploadWithoutImage-500",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 500, cuando no se envie imagen\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(415)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a Unsupported Media Type.\",()=> {\r",
							"    pm.response.to.have.status(\"Unsupported Media Type\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": [],
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}/uploadImage",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}",
						"uploadImage"
					]
				}
			},
			"response": []
		},
		{
			"name": "UploadPetForm-200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "Dulce",
							"type": "text"
						},
						{
							"key": "status",
							"value": "pending",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPetByIDAfterUpdatedWithForm-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"var nombreresponse = pm.response.json().name\r",
							"pm.test(\"Validar que el nombre de respuesta sea igual que el que se envia\", function() {\r",
							"    pm.expect(nombreresponse).to.eql(\"Dulce\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status cambio a pending\", function()\r",
							"{\r",
							"    pm.expect(pm.response.json().status).to.eql('pending')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePet - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el id aparece en el response.\", function(){\r",
							"    var id = pm.environment.get(\"id\")\r",
							"    pm.expect(pm.response.json().message).to.contain(id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePetNoExistente - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el status code response es un 404 cuando se elimina una mascota No existente.\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a Not Found cuando se elimina una mascota no existente.\",()=> {\r",
							"    pm.response.to.have.status(\"Not Found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validar que el body viene vacio\", function(){\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/v2/pet/2342342",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"2342342"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPetByIDAfterDelete - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar el código de respuesta sea igual a 404\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el mensaje es Pet not found.\", function()\r",
							"{\r",
							"    pm.expect(pm.response.text()).to.contain('Pet not found')\r",
							"})\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"Not Found\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/v2/pet/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"v2",
						"pet",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}