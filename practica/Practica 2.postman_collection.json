{
	"info": {
		"_postman_id": "27d61400-8364-4164-b0a2-019bc9883cd4",
		"name": "Practica 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3830516"
	},
	"item": [
		{
			"name": "getListaDeUsuarios-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getLeerUsuarioConID - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200, 201 o 404.\",function(){\r",
							"\t//pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,404]);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200 cuando se consulta un usuario existente.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK cuando se consulta un usuario existente.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "getLeerUsuarioConIDNoExistente - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status code response es un 404 cuando se consulta un usuario No existente.\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el status response es igual a Not Found cuando se consulta un usuario No existente.\",()=> {\r",
							"    pm.response.to.have.status(\"Not Found\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/1212",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"1212"
					]
				}
			},
			"response": []
		},
		{
			"name": "postCrearUsuario - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 201.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 201.\",function(){\r",
							"    pm.response.to.have.status(201)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"Created\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Isabel\",\r\n    \"job\": \"queen\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "getLeerUsuarioCreado - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200, 201 o 404.\",function(){\r",
							"\t//pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,404]);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200 cuando se consulta un usuario existente.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK cuando se consulta un usuario existente.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "putActualizarUsuario - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "getLeerUsuarioActualizado - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200, 201 o 404.\",function(){\r",
							"\t//pm.expect(pm.response.code).to.eql(200);\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,404]);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200 cuando se consulta un usuario existente.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK cuando se consulta un usuario existente.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteEliminarUsuario - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 204.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(204);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 204.\",function(){\r",
							"    pm.response.to.have.status(204)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a No Content.\",()=> {\r",
							"    pm.response.to.have.status(\"No Content\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"eli\",\r\n    \"job\": \"queen\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/459",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"459"
					]
				}
			},
			"response": []
		},
		{
			"name": "postRegistrarUsuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el código de respuesta es un 200.\",function(){\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//Prueba para validar el código de respuesta\r",
							"pm.test(\"Validar que el status code response es un 200.\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//Prueba para validar el estado de respuesta\r",
							"pm.test(\"Validar que el status response es igual a OK.\",()=> {\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1 seg\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
							"});\r",
							"\r",
							"pm.test(\"Validar que el body no viene vacio\", function(){\r",
							"    pm.expect(pm.response.body).not.equal(null);\r",
							"    pm.expect(pm.response.body).not.to.be.null;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"lindsay.ferguson@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		}
	]
}